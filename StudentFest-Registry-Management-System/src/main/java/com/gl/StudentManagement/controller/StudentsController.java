package com.gl.StudentManagement.controller;

import com.gl.StudentManagement.entity.Student;
import com.gl.StudentManagement.service.StudentService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.security.Principal;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping("/students")
public class StudentsController {

	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use an studentService for each
	private StudentService studentService;

	// This means that this method will be executed when user sends GET Requests to
	// "/"
	// In our case, "http://localhost:8080/StudentManagement/"

	@RequestMapping("/list")
	public String listStudents(Model theModel) {

		// get Students from db
		List<Student> theStudents = studentService.findAll();

		// We can use this attribute "liststudents" to perform server-side rendering of
		// the JSP with using Bootstrap.
		// We set all students data as "liststudents"

		// add to the spring model
		theModel.addAttribute("Students", theStudents);

		// shows the list Students jsp form:
		return "list-Students";
	}

	// showNewStudentForm
	@RequestMapping("/showFormForAdd")
	public String showFormForAdd(Model theModel) {

		// This means that this method will be executed when user sends GET Requests to
		// "/showNewStudentForm"
		// In our case, "http://localhost:8080/StudentManagement/showNewStudentForm"

		// create model attribute to bind form data
		Student theStudents = new Student();

		// We can use this attribute "student" to perform server-side rendering of the
		// JSP with using Bootstrap.
		// We set student object as "student"

		theModel.addAttribute("Student", theStudents);

		// shows the Student-form.jsp form:

		return "Student-form";
	}

	// show update student-form
	@RequestMapping("/showFormForUpdate")
	public String showFormForUpdate(@RequestParam("studentId") int theId, Model theModel) {

		// This means that this method will be executed when user sends GET Requests to
		// "/showFormForUpdate/{student's id}"
		// In our case, "http://localhost:8080/showFormForUpdate/{student's id}"

		// get the Student from the service
		Student theStudent = studentService.findById(theId);

		// set Student as a model attribute to pre-populate the form

		// @PathVariable binds the {id} which the path of GET request contains into the
		// id parameter of showUpdateForm() method.

		// We can use this attribute "student" to perform server-side rendering of the
		// JSP with using BootStrap.
		// We set student data as "student"

		theModel.addAttribute("Student", theStudent);

		// send over to Student form
		return "Student-form";
	}

	@PostMapping("/save")
	public String saveStudent(@RequestParam("id") int id, @RequestParam("firstname") String firstname,
			@RequestParam("lastname") String lastname, @RequestParam("course") String course,
			@RequestParam("country") String country) {

		System.out.println(id);
		Student theStudent;
		if (id != 0) {
			theStudent = studentService.findById(id);
			theStudent.setFirstname(firstname);
			theStudent.setLastname(lastname);
			theStudent.setCourse(course);
			theStudent.setCountry(country);

		} else
			theStudent = new Student(firstname, lastname, course, country);
		// save the Student
		studentService.save(theStudent);

		// use a redirect to prevent duplicate submissions
		return "redirect:/students/list";

		/*
		 * // add or update an student
		 * 
		 * add/update student This means that this method will be executed when user
		 * sends POST Requests to "/save" // In our case,
		 * saveStudent(@ModelAttribute("student") Student student) { // @ModelAttribute
		 * binds the object called "student" of request body from the POST request into
		 * the student parameter of the savestudent() method.
		 * 
		 * studentService.saveStudent(student);
		 * 
		 * // after save the student data to database, redirect to "/" return
		 * "redirect:/"; }
		 */

	}

	// delete the student by id

	@RequestMapping("/delete")
	public String delete(@RequestParam("studentId") int theId) {

		// This means that this method will be executed when user sends Request Mapping
		// Requests to
		// "/delete/{student's id}"
		// In our case, "http://localhost:8080/delete/{student's id}"

		// delete the Student
		studentService.deleteById(theId);

		// after delete the student data from database, redirect to "/"
		// only admin user delete student record
		return "redirect:/students/list";

	}

	// If user role unable access Modify and delete record if perform delete and
	// modify record page redirect to /403 jsp page

	@RequestMapping(value = "/403")
	public ModelAndView accesssDenied(Principal user) {

		ModelAndView model = new ModelAndView();

		if (user != null) {
			model.addObject("msg", "Hi " + user.getName() + ", you do not have permission to access this page!");
		} else {
			model.addObject("msg", "You do not have permission to access this page!");
		}

		model.setViewName("403");
		return model;

	}
}
